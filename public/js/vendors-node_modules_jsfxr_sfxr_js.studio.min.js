/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkarcade_studio"] = self["webpackChunkarcade_studio"] || []).push([["vendors-node_modules_jsfxr_sfxr_js"],{

/***/ "./node_modules/jsfxr/riffwave.js":
/*!****************************************!*\
  !*** ./node_modules/jsfxr/riffwave.js ***!
  \****************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n * RIFFWAVE.js v0.03 - Audio encoder for HTML5 <audio> elements.\n * Copyleft 2011 by Pedro Ladaria <pedro.ladaria at Gmail dot com>\n *\n * Public Domain\n *\n * Changelog:\n *\n * 0.01 - First release\n * 0.02 - New faster base64 encoding\n * 0.03 - Support for 16bit samples\n *\n * Notes:\n *\n * 8 bit data is unsigned: 0..255\n * 16 bit data is signed: -32,768..32,767\n *\n */\n\nvar FastBase64 = {\n\n  chars: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n  encLookup: [],\n\n  Init: function() {\n    for (var i=0; i<4096; i++) {\n      this.encLookup[i] = this.chars[i >> 6] + this.chars[i & 0x3F];\n    }\n  },\n\n  Encode: function(src) {\n    var len = src.length;\n    var dst = '';\n    var i = 0;\n    while (len > 2) {\n      n = (src[i] << 16) | (src[i+1]<<8) | src[i+2];\n      dst+= this.encLookup[n >> 12] + this.encLookup[n & 0xFFF];\n      len-= 3;\n      i+= 3;\n    }\n    if (len > 0) {\n      var n1= (src[i] & 0xFC) >> 2;\n      var n2= (src[i] & 0x03) << 4;\n      if (len > 1) n2 |= (src[++i] & 0xF0) >> 4;\n      dst+= this.chars[n1];\n      dst+= this.chars[n2];\n      if (len == 2) {\n        var n3= (src[i++] & 0x0F) << 2;\n        n3 |= (src[i] & 0xC0) >> 6;\n        dst+= this.chars[n3];\n      }\n      if (len == 1) dst+= '=';\n      dst+= '=';\n    }\n    return dst;\n  } // end Encode\n\n}\n\nFastBase64.Init();\n\nvar RIFFWAVE = function(data) {\n\n  this.data = [];        // Array containing audio samples\n  this.wav = [];         // Array containing the generated wave file\n  this.dataURI = '';     // http://en.wikipedia.org/wiki/Data_URI_scheme\n\n  this.header = {                         // OFFS SIZE NOTES\n    chunkId      : [0x52,0x49,0x46,0x46], // 0    4    \"RIFF\" = 0x52494646\n    chunkSize    : 0,                     // 4    4    36+SubChunk2Size = 4+(8+SubChunk1Size)+(8+SubChunk2Size)\n    format       : [0x57,0x41,0x56,0x45], // 8    4    \"WAVE\" = 0x57415645\n    subChunk1Id  : [0x66,0x6d,0x74,0x20], // 12   4    \"fmt \" = 0x666d7420\n    subChunk1Size: 16,                    // 16   4    16 for PCM\n    audioFormat  : 1,                     // 20   2    PCM = 1\n    numChannels  : 1,                     // 22   2    Mono = 1, Stereo = 2...\n    sampleRate   : 8000,                  // 24   4    8000, 44100...\n    byteRate     : 0,                     // 28   4    SampleRate*NumChannels*BitsPerSample/8\n    blockAlign   : 0,                     // 32   2    NumChannels*BitsPerSample/8\n    bitsPerSample: 8,                     // 34   2    8 bits = 8, 16 bits = 16\n    subChunk2Id  : [0x64,0x61,0x74,0x61], // 36   4    \"data\" = 0x64617461\n    subChunk2Size: 0                      // 40   4    data size = NumSamples*NumChannels*BitsPerSample/8\n  };\n\n  function u32ToArray(i) {\n    return [i&0xFF, (i>>8)&0xFF, (i>>16)&0xFF, (i>>24)&0xFF];\n  }\n\n  function u16ToArray(i) {\n    return [i&0xFF, (i>>8)&0xFF];\n  }\n\n  function split16bitArray(data) {\n    var r = [];\n    var j = 0;\n    var len = data.length;\n    for (var i=0; i<len; i++) {\n      r[j++] = data[i] & 0xFF;\n      r[j++] = (data[i]>>8) & 0xFF;\n    }\n    return r;\n  }\n\n  this.Make = function(data) {\n    if (data instanceof Array) this.data = data;\n    this.header.byteRate = (this.header.sampleRate * this.header.numChannels * this.header.bitsPerSample) >> 3;\n    this.header.blockAlign = (this.header.numChannels * this.header.bitsPerSample) >> 3;\n    this.header.subChunk2Size = this.data.length;\n    this.header.chunkSize = 36 + this.header.subChunk2Size;\n\n    this.wav = this.header.chunkId.concat(\n      u32ToArray(this.header.chunkSize),\n      this.header.format,\n      this.header.subChunk1Id,\n      u32ToArray(this.header.subChunk1Size),\n      u16ToArray(this.header.audioFormat),\n      u16ToArray(this.header.numChannels),\n      u32ToArray(this.header.sampleRate),\n      u32ToArray(this.header.byteRate),\n      u16ToArray(this.header.blockAlign),\n      u16ToArray(this.header.bitsPerSample),\n      this.header.subChunk2Id,\n      u32ToArray(this.header.subChunk2Size),\n      this.data\n    );\n    this.dataURI = 'data:audio/wav;base64,'+FastBase64.Encode(this.wav);\n  };\n\n  if (data instanceof Array) this.Make(data);\n\n}; // end RIFFWAVE\n\n(function (root, factory) {\n  if(true) {\n    // Now we're wrapping the factory and assigning the return\n    // value to the root (window) and returning it as well to\n    // the AMD loader.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){\n      return (root.RIFFWAVE = factory());\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(this, function() {\n  // module code here....\n  return RIFFWAVE;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jsfxr/riffwave.js\n");

/***/ }),

/***/ "./node_modules/jsfxr/sfxr.js":
/*!************************************!*\
  !*** ./node_modules/jsfxr/sfxr.js ***!
  \************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Wave shapes\nvar SQUARE = 0;\nvar SAWTOOTH = 1;\nvar SINE = 2;\nvar NOISE = 3;\n\n// Playback volume\nvar masterVolume = 1;\n\nvar OVERSAMPLING = 8;\n\n/*** Core data structure ***/\n\n// Sound generation parameters are on [0,1] unless noted SIGNED & thus\n// on [-1,1]\nfunction Params() {\n  this.oldParams = true;  // Note what structure this is\n\n  // Wave shape\n  this.wave_type = SQUARE;\n\n  // Envelope\n  this.p_env_attack = 0;   // Attack time\n  this.p_env_sustain = 0.3;  // Sustain time\n  this.p_env_punch = 0;    // Sustain punch\n  this.p_env_decay = 0.4;    // Decay time\n\n  // Tone\n  this.p_base_freq = 0.3;    // Start frequency\n  this.p_freq_limit = 0;   // Min frequency cutoff\n  this.p_freq_ramp = 0;    // Slide (SIGNED)\n  this.p_freq_dramp = 0;   // Delta slide (SIGNED)\n  // Vibrato\n  this.p_vib_strength = 0; // Vibrato depth\n  this.p_vib_speed = 0;    // Vibrato speed\n\n  // Tonal change\n  this.p_arp_mod = 0;      // Change amount (SIGNED)\n  this.p_arp_speed = 0;    // Change speed\n\n  // Square wave duty (proportion of time signal is high vs. low)\n  this.p_duty = 0;         // Square duty\n  this.p_duty_ramp = 0;    // Duty sweep (SIGNED)\n\n  // Repeat\n  this.p_repeat_speed = 0; // Repeat speed\n\n  // Flanger\n  this.p_pha_offset = 0;   // Flanger offset (SIGNED)\n  this.p_pha_ramp = 0;     // Flanger sweep (SIGNED)\n\n  // Low-pass filter\n  this.p_lpf_freq = 1;     // Low-pass filter cutoff\n  this.p_lpf_ramp = 0;     // Low-pass filter cutoff sweep (SIGNED)\n  this.p_lpf_resonance = 0;// Low-pass filter resonance\n  // High-pass filter\n  this.p_hpf_freq = 0;     // High-pass filter cutoff\n  this.p_hpf_ramp = 0;     // High-pass filter cutoff sweep (SIGNED)\n\n  // Sample parameters\n  this.sound_vol = 0.5;\n  this.sample_rate = 44100;\n  this.sample_size = 8;\n}\n\n/*** Helper functions ***/\n\nfunction sqr(x) { return x * x }\nfunction cube(x) { return x * x * x }\nfunction sign(x) { return x < 0 ? -1 : 1 }\nfunction log(x, b) { return Math.log(x) / Math.log(b); }\nvar pow = Math.pow;\n\nfunction frnd(range) {\n  return Math.random() * range;\n}\n\nfunction rndr(from, to) {\n  return Math.random() * (to - from) + from;\n}\n\nfunction rnd(max) {\n  return Math.floor(Math.random() * (max + 1));\n}\n\n/*** Import/export functions ***/\n\n// http://stackoverflow.com/questions/3096646/how-to-convert-a-floating-point-number-to-its-binary-representation-ieee-754-i\nfunction assembleFloat(sign, exponent, mantissa)\n{\n    return (sign << 31) | (exponent << 23) | (mantissa);\n}\n\nfunction floatToNumber(flt)\n{\n    if (isNaN(flt)) // Special case: NaN\n        return assembleFloat(0, 0xFF, 0x1337); // Mantissa is nonzero for NaN\n\n    var sign = (flt < 0) ? 1 : 0;\n    flt = Math.abs(flt);\n    if (flt == 0.0) // Special case: +-0\n        return assembleFloat(sign, 0, 0);\n\n    var exponent = Math.floor(Math.log(flt) / Math.LN2);\n    if (exponent > 127 || exponent < -126) // Special case: +-Infinity (and huge numbers)\n        return assembleFloat(sign, 0xFF, 0); // Mantissa is zero for +-Infinity\n\n    var mantissa = flt / Math.pow(2, exponent);\n    return assembleFloat(sign, exponent + 127, (mantissa * Math.pow(2, 23)) & 0x7FFFFF);\n}\n\n// http://stackoverflow.com/a/16001019\nfunction numberToFloat(bytes) {\n    var sign = (bytes & 0x80000000) ? -1 : 1;\n    var exponent = ((bytes >> 23) & 0xFF) - 127;\n    var significand = (bytes & ~(-1 << 23));\n\n    if (exponent == 128) \n        return sign * ((significand) ? Number.NaN : Number.POSITIVE_INFINITY);\n\n    if (exponent == -127) {\n        if (significand == 0) return sign * 0.0;\n        exponent = -126;\n        significand /= (1 << 22);\n    } else significand = (significand | (1 << 23)) / (1 << 23);\n\n    return sign * significand * Math.pow(2, exponent);\n}\n\n// export parameter list to URL friendly base58 string\n// https://gist.github.com/diafygi/90a3e80ca1c2793220e5/\nvar b58alphabet = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\nvar params_order = [\n  \"wave_type\",\n  \"p_env_attack\",\n  \"p_env_sustain\",\n  \"p_env_punch\",\n  \"p_env_decay\",\n  \"p_base_freq\",\n  \"p_freq_limit\",\n  \"p_freq_ramp\",\n  \"p_freq_dramp\",\n  \"p_vib_strength\",\n  \"p_vib_speed\",\n  \"p_arp_mod\",\n  \"p_arp_speed\",\n  \"p_duty\",\n  \"p_duty_ramp\",\n  \"p_repeat_speed\",\n  \"p_pha_offset\",\n  \"p_pha_ramp\",\n  \"p_lpf_freq\",\n  \"p_lpf_ramp\",\n  \"p_lpf_resonance\",\n  \"p_hpf_freq\",\n  \"p_hpf_ramp\"\n];\n\nvar params_signed = [\"p_freq_ramp\", \"p_freq_dramp\", \"p_arp_mod\", \"p_duty_ramp\", \"p_pha_offset\", \"p_pha_ramp\", \"p_lpf_ramp\", \"p_hpf_ramp\"];\n\nParams.prototype.toB58 = function() {\n  var convert = [];\n  for (var pi in params_order) {\n    var p = params_order[pi];\n    if (p == \"wave_type\") {\n      convert.push(this[p]);\n    } else if (p.indexOf(\"p_\") == 0) {\n      var val = this[p];\n      val = floatToNumber(val);\n      convert.push(0xff & val);\n      convert.push(0xff & (val >> 8))\n      convert.push(0xff & (val >> 16))\n      convert.push(0xff & (val >> 24))\n    }\n  }\n  return function(B,A){var d=[],s=\"\",i,j,c,n;for(i in B){j=0,c=B[i];s+=c||s.length^i?\"\":1;while(j in d||c){n=d[j];n=n?n*256+c:c;c=n/58|0;d[j]=n%58;j++}}while(j--)s+=A[d[j]];return s}(convert, b58alphabet);\n}\n\nParams.prototype.fromB58 = function(b58encoded) {\n  this.fromJSON(sfxr.b58decode(b58encoded));\n  return this;\n}\n\nParams.prototype.fromJSON = function(struct) {\n  for (var p in struct) {\n    if (struct.hasOwnProperty(p)) {\n      this[p] = struct[p];\n    }\n  }\n  return this;\n}\n\n/*** Presets ***/\n\n// These functions roll up random sounds appropriate to various\n// typical game events:\n\nParams.prototype.pickupCoin = function () {\n  this.wave_type = SAWTOOTH;\n  this.p_base_freq = 0.4 + frnd(0.5);\n  this.p_env_attack = 0;\n  this.p_env_sustain = frnd(0.1);\n  this.p_env_decay = 0.1 + frnd(0.4);\n  this.p_env_punch = 0.3 + frnd(0.3);\n  if (rnd(1)) {\n    this.p_arp_speed = 0.5 + frnd(0.2);\n    this.p_arp_mod = 0.2 + frnd(0.4);\n  }\n  return this;\n}\n\nParams.prototype.laserShoot = function () {\n  this.wave_type = rnd(2);\n  if(this.wave_type === SINE && rnd(1))\n    this.wave_type = rnd(1);\n  if (rnd(2) === 0) {\n    this.p_base_freq = 0.3 + frnd(0.6);\n    this.p_freq_limit = frnd(0.1);\n    this.p_freq_ramp = -0.35 - frnd(0.3);\n  } else {\n    this.p_base_freq = 0.5 + frnd(0.5);\n    this.p_freq_limit = this.p_base_freq - 0.2 - frnd(0.6);\n    if (this.p_freq_limit < 0.2) this.p_freq_limit = 0.2;\n    this.p_freq_ramp = -0.15 - frnd(0.2);\n  }\n  if (this.wave_type === SAWTOOTH)\n    this.p_duty = 1;\n  if (rnd(1)) {\n    this.p_duty = frnd(0.5);\n    this.p_duty_ramp = frnd(0.2);\n  } else {\n    this.p_duty = 0.4 + frnd(0.5);\n    this.p_duty_ramp = -frnd(0.7);\n  }\n  this.p_env_attack = 0;\n  this.p_env_sustain = 0.1 + frnd(0.2);\n  this.p_env_decay = frnd(0.4);\n  if (rnd(1))\n    this.p_env_punch = frnd(0.3);\n  if (rnd(2) === 0) {\n    this.p_pha_offset = frnd(0.2);\n    this.p_pha_ramp = -frnd(0.2);\n  }\n  //if (rnd(1))\n    this.p_hpf_freq = frnd(0.3);\n\n  return this;\n}\n\nParams.prototype.explosion = function () {\n  this.wave_type = NOISE;\n  if (rnd(1)) {\n    this.p_base_freq = sqr(0.1 + frnd(0.4));\n    this.p_freq_ramp = -0.1 + frnd(0.4);\n  } else {\n    this.p_base_freq = sqr(0.2 + frnd(0.7));\n    this.p_freq_ramp = -0.2 - frnd(0.2);\n  }\n  if (rnd(4) === 0)\n    this.p_freq_ramp = 0;\n  if (rnd(2) === 0)\n    this.p_repeat_speed = 0.3 + frnd(0.5);\n  this.p_env_attack = 0;\n  this.p_env_sustain = 0.1 + frnd(0.3);\n  this.p_env_decay = frnd(0.5);\n  if (rnd(1)) {\n    this.p_pha_offset = -0.3 + frnd(0.9);\n    this.p_pha_ramp = -frnd(0.3);\n  }\n  this.p_env_punch = 0.2 + frnd(0.6);\n  if (rnd(1)) {\n    this.p_vib_strength = frnd(0.7);\n    this.p_vib_speed = frnd(0.6);\n  }\n  if (rnd(2) === 0) {\n    this.p_arp_speed = 0.6 + frnd(0.3);\n    this.p_arp_mod = 0.8 - frnd(1.6);\n  }\n\n  return this;\n}\n\nParams.prototype.powerUp = function () {\n  if (rnd(1)) {\n    this.wave_type = SAWTOOTH;\n    this.p_duty = 1;\n  } else {\n    this.p_duty = frnd(0.6);\n  }\n  this.p_base_freq = 0.2 + frnd(0.3);\n  if (rnd(1)) {\n    this.p_freq_ramp = 0.1 + frnd(0.4);\n    this.p_repeat_speed = 0.4 + frnd(0.4);\n  } else {\n    this.p_freq_ramp = 0.05 + frnd(0.2);\n    if (rnd(1)) {\n      this.p_vib_strength = frnd(0.7);\n      this.p_vib_speed = frnd(0.6);\n    }\n  }\n  this.p_env_attack = 0;\n  this.p_env_sustain = frnd(0.4);\n  this.p_env_decay = 0.1 + frnd(0.4);\n\n  return this;\n}\n\nParams.prototype.hitHurt = function () {\n  this.wave_type = rnd(2);\n  if (this.wave_type === SINE)\n    this.wave_type = NOISE;\n  if (this.wave_type === SQUARE)\n    this.p_duty = frnd(0.6);\n  if (this.wave_type === SAWTOOTH)\n    this.p_duty = 1;\n  this.p_base_freq = 0.2 + frnd(0.6);\n  this.p_freq_ramp = -0.3 - frnd(0.4);\n  this.p_env_attack = 0;\n  this.p_env_sustain = frnd(0.1);\n  this.p_env_decay = 0.1 + frnd(0.2);\n  if (rnd(1))\n    this.p_hpf_freq = frnd(0.3);\n  return this;\n}\n\nParams.prototype.jump = function () {\n  this.wave_type = SQUARE;\n  this.p_duty = frnd(0.6);\n  this.p_base_freq = 0.3 + frnd(0.3);\n  this.p_freq_ramp = 0.1 + frnd(0.2);\n  this.p_env_attack = 0;\n  this.p_env_sustain = 0.1 + frnd(0.3);\n  this.p_env_decay = 0.1 + frnd(0.2);\n  if (rnd(1))\n    this.p_hpf_freq = frnd(0.3);\n  if (rnd(1))\n    this.p_lpf_freq = 1 - frnd(0.6);\n  return this;\n}\n\nParams.prototype.blipSelect = function () {\n  this.wave_type = rnd(1);\n  if (this.wave_type === SQUARE)\n    this.p_duty = frnd(0.6);\n  else\n    this.p_duty = 1;\n  this.p_base_freq = 0.2 + frnd(0.4);\n  this.p_env_attack = 0;\n  this.p_env_sustain = 0.1 + frnd(0.1);\n  this.p_env_decay = frnd(0.2);\n  this.p_hpf_freq = 0.1;\n  return this;\n}\n\nParams.prototype.synth = function () {\n  this.wave_type = rnd(1);\n  this.p_base_freq = [0.2723171360931539, 0.19255692561524382, 0.13615778746815113][rnd(2)];\n  this.p_env_attack = rnd(4) > 3 ? frnd(0.5) : 0;\n  this.p_env_sustain = frnd(1);\n  this.p_env_punch = frnd(1);\n  this.p_env_decay = frnd(0.9) + 0.1;\n  this.p_arp_mod = [0, 0, 0, 0, -0.3162, 0.7454, 0.7454][rnd(6)];\n  this.p_arp_speed = frnd(0.5) + 0.4;\n  this.p_duty = frnd(1);\n  this.p_duty_ramp = rnd(2) == 2 ? frnd(1) : 0;\n  this.p_lpf_freq = [1, 0.9 * frnd(1) * frnd(1) + 0.1][rnd(1)];\n  this.p_lpf_ramp = rndr(-1, 1);\n  this.p_lpf_resonance = frnd(1);\n  this.p_hpf_freq = rnd(3) == 3 ? frnd(1) : 0;\n  this.p_hpf_ramp = rnd(3) == 3 ? frnd(1) : 0;\n  return this;\n}\n\nParams.prototype.tone = function () {\n  this.wave_type = SINE;\n  this.p_base_freq = 0.35173364; // 440 Hz\n  this.p_env_attack = 0;\n  this.p_env_sustain = 0.6641; // 1 sec\n  this.p_env_decay = 0;\n  this.p_env_punch = 0;\n  return this;\n}\n\nParams.prototype.click = function() {\n  const base = [\"explosion\", \"hitHurt\"][rnd(1)];\n  this[base]();\n  if (rnd(1)) {\n    this.p_freq_ramp = -0.5 + frnd(1.0);\n  }\n  if (rnd(1)) {\n    this.p_env_sustain = (frnd(0.4) + 0.2) * this.p_env_sustain;\n    this.p_env_decay = (frnd(0.4) + 0.2) * this.p_env_decay;\n  }\n  if (rnd(3) == 0) {\n    this.p_env_attack = frnd(0.3);\n  }\n  this.p_base_freq = 1 - frnd(0.25);\n  this.p_hpf_freq = 1 - frnd(0.1);\n  return this;\n}\n\nParams.prototype.random = function () {\n  this.wave_type = rnd(3);\n  if (rnd(1))\n    this.p_base_freq = cube(frnd(2) - 1) + 0.5;\n  else\n    this.p_base_freq = sqr(frnd(1));\n  this.p_freq_limit = 0;\n  this.p_freq_ramp = Math.pow(frnd(2) - 1, 5);\n  if (this.p_base_freq > 0.7 && this.p_freq_ramp > 0.2)\n    this.p_freq_ramp = -this.p_freq_ramp;\n  if (this.p_base_freq < 0.2 && this.p_freq_ramp < -0.05)\n    this.p_freq_ramp = -this.p_freq_ramp;\n  this.p_freq_dramp = Math.pow(frnd(2) - 1, 3);\n  this.p_duty = frnd(2) - 1;\n  this.p_duty_ramp = Math.pow(frnd(2) - 1, 3);\n  this.p_vib_strength = Math.pow(frnd(2) - 1, 3);\n  this.p_vib_speed = rndr(-1, 1);\n  this.p_env_attack = cube(rndr(-1, 1));\n  this.p_env_sustain = sqr(rndr(-1, 1));\n  this.p_env_decay = rndr(-1, 1);\n  this.p_env_punch = Math.pow(frnd(0.8), 2);\n  if (this.p_env_attack + this.p_env_sustain + this.p_env_decay < 0.2) {\n    this.p_env_sustain += 0.2 + frnd(0.3);\n    this.p_env_decay += 0.2 + frnd(0.3);\n  }\n  this.p_lpf_resonance = rndr(-1, 1);\n  this.p_lpf_freq = 1 - Math.pow(frnd(1), 3);\n  this.p_lpf_ramp = Math.pow(frnd(2) - 1, 3);\n  if (this.p_lpf_freq < 0.1 && this.p_lpf_ramp < -0.05)\n    this.p_lpf_ramp = -this.p_lpf_ramp;\n  this.p_hpf_freq = Math.pow(frnd(1), 5);\n  this.p_hpf_ramp = Math.pow(frnd(2) - 1, 5);\n  this.p_pha_offset = Math.pow(frnd(2) - 1, 3);\n  this.p_pha_ramp = Math.pow(frnd(2) - 1, 3);\n  this.p_repeat_speed = frnd(2) - 1;\n  this.p_arp_speed = frnd(2) - 1;\n  this.p_arp_mod = frnd(2) - 1;\n  return this;\n}\n\nParams.prototype.mutate = function () {\n  if (rnd(1)) this.p_base_freq += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_freq_ramp += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_freq_dramp += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_duty += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_duty_ramp += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_vib_strength += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_vib_speed += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_vib_delay += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_env_attack += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_env_sustain += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_env_decay += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_env_punch += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_lpf_resonance += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_lpf_freq += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_lpf_ramp += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_hpf_freq += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_hpf_ramp += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_pha_offset += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_pha_ramp += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_repeat_speed += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_arp_speed += frnd(0.1) - 0.05;\n  if (rnd(1)) this.p_arp_mod += frnd(0.1) - 0.05;\n  return this;\n}\n\n/*** Simpler namespaced functional API ***/\n\nsfxr = {};\n\nsfxr.toBuffer = function(synthdef) {\n  return (new SoundEffect(synthdef)).getRawBuffer()[\"buffer\"];\n};\n\nsfxr.toWebAudio = function(synthdef, audiocontext) {\n  var sfx = new SoundEffect(synthdef);\n  var buffer = sfx.getRawBuffer()[\"normalized\"];\n  if (audiocontext) {\n    var buff = audiocontext.createBuffer(1, buffer.length, sfx.sampleRate);\n    var nowBuffering = buff.getChannelData(0);\n    for (var i = 0; i < buffer.length; i++) {\n      nowBuffering[i] = buffer[i];\n    }\n    var proc = audiocontext.createBufferSource();\n    proc.buffer = buff;\n    return proc;\n  }\n};\n\nsfxr.toWave = function(synthdef) {\n  return (new SoundEffect(synthdef)).generate();\n};\n\nsfxr.toAudio = function(synthdef) {\n  return sfxr.toWave(synthdef).getAudio();\n}\n\nsfxr.play = function(synthdef) {\n  return sfxr.toAudio(synthdef).play();\n}\n\nsfxr.b58decode = function(b58encoded) {\n  var decoded = function(S,A){var d=[],b=[],i,j,c,n;for(i in S){j=0,c=A.indexOf(S[i]);if(c<0)return undefined;c||b.length^i?i:b.push(0);while(j in d||c){n=d[j];n=n?n*58+c:c;c=n>>8;d[j]=n%256;j++}}while(j--)b.push(d[j]);return new Uint8Array(b)}(b58encoded,b58alphabet);\n  var result = {};\n  for (var pi in params_order) {\n    var p = params_order[pi];\n    var offset = (pi - 1) * 4 + 1;\n    if (p == \"wave_type\") {\n      result[p] = decoded[0];\n    } else {\n      var val = (decoded[offset] | (decoded[offset + 1] << 8) | (decoded[offset + 2] << 16) | (decoded[offset + 3] << 24));\n      result[p] = numberToFloat(val);\n    }\n  }\n  return result;\n}\n\nsfxr.b58encode = function(synthdef) {\n  var p = new Params();\n  p.fromJSON(synthdef);\n  return p.toB58();\n}\n\nsfxr.generate = function(algorithm, options) {\n  const p = new Params();\n  const opts = options || {};\n  p.sound_vol = opts[\"sound_vol\"] || 0.25;\n  p.sample_rate = opts[\"sample_rate\"] || 44100;\n  p.sample_size = opts[\"sample_size\"] || 8;\n  return p[algorithm]();\n}\n\n/*** Main entry point ***/\n\nfunction SoundEffect(ps) {\n  if (typeof(ps) == \"string\") {\n    var PARAMS = new Params();\n    if (ps.indexOf(\"#\") == 0) {\n      ps = ps.slice(1);\n    }\n    ps = PARAMS.fromB58(ps);\n  }\n  this.init(ps);\n}\n\nSoundEffect.prototype.init = function (ps) {\n  this.parameters = ps;\n  this.initForRepeat();  // First time through, this is a bit of a misnomer\n\n  // Waveform shape\n  this.waveShape = parseInt(ps.wave_type);\n\n  // Filter\n  this.fltw = Math.pow(ps.p_lpf_freq, 3) * 0.1;\n  this.enableLowPassFilter = (ps.p_lpf_freq != 1);\n  this.fltw_d = 1 + ps.p_lpf_ramp * 0.0001;\n  this.fltdmp = 5 / (1 + Math.pow(ps.p_lpf_resonance, 2) * 20) *\n    (0.01 + this.fltw);\n  if (this.fltdmp > 0.8) this.fltdmp=0.8;\n  this.flthp = Math.pow(ps.p_hpf_freq, 2) * 0.1;\n  this.flthp_d = 1 + ps.p_hpf_ramp * 0.0003;\n\n  // Vibrato\n  this.vibratoSpeed = Math.pow(ps.p_vib_speed, 2) * 0.01;\n  this.vibratoAmplitude = ps.p_vib_strength * 0.5;\n\n  // Envelope\n  this.envelopeLength = [\n    Math.floor(ps.p_env_attack * ps.p_env_attack * 100000),\n    Math.floor(ps.p_env_sustain * ps.p_env_sustain * 100000),\n    Math.floor(ps.p_env_decay * ps.p_env_decay * 100000)\n  ];\n  this.envelopePunch = ps.p_env_punch;\n\n  // Flanger\n  this.flangerOffset = Math.pow(ps.p_pha_offset, 2) * 1020;\n  if (ps.p_pha_offset < 0) this.flangerOffset = -this.flangerOffset;\n  this.flangerOffsetSlide = Math.pow(ps.p_pha_ramp, 2) * 1;\n  if (ps.p_pha_ramp < 0) this.flangerOffsetSlide = -this.flangerOffsetSlide;\n\n  // Repeat\n  this.repeatTime = Math.floor(Math.pow(1 - ps.p_repeat_speed, 2) * 20000\n                               + 32);\n  if (ps.p_repeat_speed === 0)\n    this.repeatTime = 0;\n\n  this.gain = Math.exp(ps.sound_vol) - 1;\n\n  this.sampleRate = ps.sample_rate;\n  this.bitsPerChannel = ps.sample_size;\n}\n\nSoundEffect.prototype.initForRepeat = function() {\n  var ps = this.parameters;\n  this.elapsedSinceRepeat = 0;\n\n  this.period = 100 / (ps.p_base_freq * ps.p_base_freq + 0.001);\n  this.periodMax = 100 / (ps.p_freq_limit * ps.p_freq_limit + 0.001);\n  this.enableFrequencyCutoff = (ps.p_freq_limit > 0);\n  this.periodMult = 1 - Math.pow(ps.p_freq_ramp, 3) * 0.01;\n  this.periodMultSlide = -Math.pow(ps.p_freq_dramp, 3) * 0.000001;\n\n  this.dutyCycle = 0.5 - ps.p_duty * 0.5;\n  this.dutyCycleSlide = -ps.p_duty_ramp * 0.00005;\n\n  if (ps.p_arp_mod >= 0)\n    this.arpeggioMultiplier = 1 - Math.pow(ps.p_arp_mod, 2) * .9;\n  else\n    this.arpeggioMultiplier = 1 + Math.pow(ps.p_arp_mod, 2) * 10;\n  this.arpeggioTime = Math.floor(Math.pow(1 - ps.p_arp_speed, 2) * 20000 + 32);\n  if (ps.p_arp_speed === 1)\n    this.arpeggioTime = 0;\n}\n\nSoundEffect.prototype.getRawBuffer = function () {\n  var fltp = 0;\n  var fltdp = 0;\n  var fltphp = 0;\n\n  var noise_buffer = Array(32);\n  for (var i = 0; i < 32; ++i)\n    noise_buffer[i] = Math.random() * 2 - 1;\n\n  var envelopeStage = 0;\n  var envelopeElapsed = 0;\n\n  var vibratoPhase = 0;\n\n  var phase = 0;\n  var ipp = 0;\n  var flanger_buffer = Array(1024);\n  for (var i = 0; i < 1024; ++i)\n    flanger_buffer[i] = 0;\n\n  var num_clipped = 0;\n\n  var buffer = [];\n  var normalized = [];\n\n  var sample_sum = 0;\n  var num_summed = 0;\n  var summands = Math.floor(44100 / this.sampleRate);\n\n  for(var t = 0; ; ++t) {\n\n    // Repeats\n    if (this.repeatTime != 0 && ++this.elapsedSinceRepeat >= this.repeatTime)\n      this.initForRepeat();\n\n    // Arpeggio (single)\n    if(this.arpeggioTime != 0 && t >= this.arpeggioTime) {\n      this.arpeggioTime = 0;\n      this.period *= this.arpeggioMultiplier;\n    }\n\n    // Frequency slide, and frequency slide slide!\n    this.periodMult += this.periodMultSlide;\n    this.period *= this.periodMult;\n    if(this.period > this.periodMax) {\n      this.period = this.periodMax;\n      if (this.enableFrequencyCutoff)\n        break;\n    }\n\n    // Vibrato\n    var rfperiod = this.period;\n    if (this.vibratoAmplitude > 0) {\n      vibratoPhase += this.vibratoSpeed;\n      rfperiod = this.period * (1 + Math.sin(vibratoPhase) * this.vibratoAmplitude);\n    }\n    var iperiod = Math.floor(rfperiod);\n    if (iperiod < OVERSAMPLING) iperiod = OVERSAMPLING;\n\n    // Square wave duty cycle\n    this.dutyCycle += this.dutyCycleSlide;\n    if (this.dutyCycle < 0) this.dutyCycle = 0;\n    if (this.dutyCycle > 0.5) this.dutyCycle = 0.5;\n\n    // Volume envelope\n    if (++envelopeElapsed > this.envelopeLength[envelopeStage]) {\n      envelopeElapsed = 0;\n      if (++envelopeStage > 2)\n        break;\n    }\n    var env_vol;\n    var envf = envelopeElapsed / this.envelopeLength[envelopeStage];\n    if (envelopeStage === 0) {         // Attack\n      env_vol = envf;\n    } else if (envelopeStage === 1) {  // Sustain\n      env_vol = 1 + (1 - envf) * 2 * this.envelopePunch;\n    } else {                           // Decay\n      env_vol = 1 - envf;\n    }\n\n    // Flanger step\n    this.flangerOffset += this.flangerOffsetSlide;\n    var iphase = Math.abs(Math.floor(this.flangerOffset));\n    if (iphase > 1023) iphase = 1023;\n\n    if (this.flthp_d != 0) {\n      this.flthp *= this.flthp_d;\n      if (this.flthp < 0.00001)\n        this.flthp = 0.00001;\n      if (this.flthp > 0.1)\n        this.flthp = 0.1;\n    }\n\n    // 8x oversampling\n    var sample = 0;\n    for (var si = 0; si < OVERSAMPLING; ++si) {\n      var sub_sample = 0;\n      phase++;\n      if (phase >= iperiod) {\n        phase %= iperiod;\n        if (this.waveShape === NOISE)\n          for(var i = 0; i < 32; ++i)\n            noise_buffer[i] = Math.random() * 2 - 1;\n      }\n\n      // Base waveform\n      var fp = phase / iperiod;\n      if (this.waveShape === SQUARE) {\n        if (fp < this.dutyCycle)\n          sub_sample=0.5;\n        else\n          sub_sample=-0.5;\n      } else if (this.waveShape === SAWTOOTH) {\n        if (fp < this.dutyCycle)\n          sub_sample = -1 + 2 * fp/this.dutyCycle;\n        else\n          sub_sample = 1 - 2 * (fp-this.dutyCycle)/(1-this.dutyCycle);\n      } else if (this.waveShape === SINE) {\n        sub_sample = Math.sin(fp * 2 * Math.PI);\n      } else if (this.waveShape === NOISE) {\n        sub_sample = noise_buffer[Math.floor(phase * 32 / iperiod)];\n      } else {\n        throw \"ERROR: Bad wave type: \" + this.waveShape;\n      }\n\n      // Low-pass filter\n      var pp = fltp;\n      this.fltw *= this.fltw_d;\n      if (this.fltw < 0) this.fltw = 0;\n      if (this.fltw > 0.1) this.fltw = 0.1;\n      if (this.enableLowPassFilter) {\n        fltdp += (sub_sample - fltp) * this.fltw;\n        fltdp -= fltdp * this.fltdmp;\n      } else {\n        fltp = sub_sample;\n        fltdp = 0;\n      }\n      fltp += fltdp;\n\n      // High-pass filter\n      fltphp += fltp - pp;\n      fltphp -= fltphp * this.flthp;\n      sub_sample = fltphp;\n\n      // Flanger\n      flanger_buffer[ipp & 1023] = sub_sample;\n      sub_sample += flanger_buffer[(ipp - iphase + 1024) & 1023];\n      ipp = (ipp + 1) & 1023;\n\n      // final accumulation and envelope application\n      sample += sub_sample * env_vol;\n    }\n\n    // Accumulate samples appropriately for sample rate\n    sample_sum += sample;\n    if (++num_summed >= summands) {\n      num_summed = 0;\n      sample = sample_sum / summands;\n      sample_sum = 0;\n    } else {\n      continue;\n    }\n\n    sample = sample / OVERSAMPLING * masterVolume;\n    sample *= this.gain;\n\n    // store the original normalized floating point sample\n    normalized.push(sample);\n\n    if (this.bitsPerChannel === 8) {\n      // Rescale [-1, 1) to [0, 256)\n      sample = Math.floor((sample + 1) * 128);\n      if (sample > 255) {\n        sample = 255;\n        ++num_clipped;\n      } else if (sample < 0) {\n        sample = 0;\n        ++num_clipped;\n      }\n      buffer.push(sample);\n    } else {\n      // Rescale [-1, 1) to [-32768, 32768)\n      sample = Math.floor(sample * (1<<15));\n      if (sample >= (1<<15)) {\n        sample = (1 << 15)-1;\n        ++num_clipped;\n      } else if (sample < -(1<<15)) {\n        sample = -(1 << 15);\n        ++num_clipped;\n      }\n      buffer.push(sample & 0xFF);\n      buffer.push((sample >> 8) & 0xFF);\n    }\n  }\n  \n  return {\n    \"buffer\": buffer,\n    \"normalized\": normalized,\n    \"clipped\": num_clipped,\n  }\n}\n\nSoundEffect.prototype.generate = function() {\n  var rendered = this.getRawBuffer();\n  var wave = new RIFFWAVE();\n  wave.header.sampleRate = this.sampleRate;\n  wave.header.bitsPerSample = this.bitsPerChannel;\n  wave.Make(rendered.buffer);\n  wave.clipping = rendered.clipped;\n  wave.buffer = rendered.normalized;\n  wave.getAudio = _sfxr_getAudioFn(wave);\n  return wave;\n}\n\nvar _actx = null;\nvar _sfxr_getAudioFn = function(wave) {\n  return function() {\n    // check for procedural audio\n    var actx = null;\n    if (!_actx) {\n      if ('AudioContext' in window) {\n        _actx = new AudioContext();\n      } else if ('webkitAudioContext' in window) {\n        _actx = new webkitAudioContext();\n      }\n    }\n    actx = _actx;\n    \n    if (actx) {\n      var buff = actx.createBuffer(1, wave.buffer.length, wave.header.sampleRate);\n      var nowBuffering = buff.getChannelData(0);\n      for (var i=0;i<wave.buffer.length;i++) {\n        nowBuffering[i] = wave.buffer[i];\n      }\n      var volume = 1.0;\n      var obj = {\n        \"channels\": [],\n        \"setVolume\": function(v) { volume = v; return obj; },\n        \"play\": function() {\n          var proc = actx.createBufferSource();\n          proc.buffer = buff;\n          var gainNode = actx.createGain()\n          gainNode.gain.value = volume;\n          gainNode.connect(actx.destination)\n          proc.connect(gainNode);\n          if (proc[\"start\"]) {\n            proc.start();\n          } else if (proc[\"noteOn\"]) {\n            proc.noteOn(0);\n          }\n          this.channels.push(proc);\n          return proc;\n        }\n      };\n      return obj;\n    } else {\n      var audio = new Audio();\n      audio.src = wave.dataURI;\n      return audio;\n    }\n  };\n};\n\n/*** conversions from slider values, internal, and units ***/\n\n// convert from slider values to internal representation\n\nvar sliders = {\n  p_env_attack:  function (v) { return v * v * 100000.0 },\n  p_env_sustain: function (v) { return v * v * 100000.0 },\n  p_env_punch:   function (v) { return v },\n  p_env_decay:   function (v) { return v * v * 100000.0 },\n\n  p_base_freq:  function (v) { return 8 * 44100 * (v * v + 0.001) / 100 },\n  p_freq_limit: function (v) { return 8 * 44100 * (v * v + 0.001) / 100 },\n  p_freq_ramp:  function (v) { return 1.0 - Math.pow(v, 3.0) * 0.01 },\n  p_freq_dramp: function (v) { return -Math.pow(v, 3.0) * 0.000001 },\n\n  p_vib_speed:    function (v) { return Math.pow(v, 2.0) * 0.01 },\n  p_vib_strength: function (v) { return v * 0.5 },\n\n  p_arp_mod:   function (v) { \n    return v >= 0 ? 1.0 - Math.pow(v, 2) * 0.9 : 1.0 + Math.pow(v, 2) * 10; },\n  p_arp_speed: function (v) { return (v === 1.0) ? 0 :\n                              Math.floor(Math.pow(1.0 - v, 2.0) * 20000 + 32)},\n\n  p_duty:      function (v) { return 0.5 - v * 0.5; },\n  p_duty_ramp: function (v) { return -v * 0.00005 },\n\n  p_repeat_speed: function (v) { return (v === 0) ? 0 :\n                                 Math.floor(Math.pow(1-v, 2) * 20000) + 32 },\n\n  p_pha_offset: function (v) { return (v < 0 ? -1 : 1) * Math.pow(v,2)*1020 },\n  p_pha_ramp:   function (v) { return (v < 0 ? -1 : 1) * Math.pow(v,2) },\n\n  p_lpf_freq:   function (v) { return Math.pow(v, 3) * 0.1 },\n  p_lpf_ramp:   function (v) { return 1.0 + v * 0.0001 },\n  p_lpf_resonance: function (v) { return 5.0 / (1.0 + Math.pow(v, 2) * 20) }, // * (0.01 + fltw);\n\n  p_hpf_freq: function (v) { return Math.pow(v, 2) * 0.1 },\n  p_hpf_ramp: function (v) { return 1.0 + v * 0.0003 },\n\n  sound_vol: function (v) { return Math.exp(v) - 1; }\n};\n\nvar sliders_inverse = {\n  p_env_attack:  function (v) { return Math.sqrt(v / 100000.0); },\n  p_env_sustain: function (v) { return Math.sqrt(v / 100000.0); },\n  p_env_punch:   function (v) { return v; },\n  p_env_decay:   function (v) { return Math.sqrt(v / 100000.0); },\n\n  p_base_freq:  function (v) { return Math.sqrt(v * 100 / 8 / 44100 - 0.001); },\n  p_freq_limit: function (v) { return Math.sqrt(v * 100 / 8 / 44100 - 0.001); },\n  p_freq_ramp:  function (v) { return Math.cbrt((1.0 - v) / 0.01); },\n  p_freq_dramp: function (v) { return Math.cbrt(v / -0.000001); },\n\n  p_vib_speed:    function (v) { return Math.sqrt(v / 0.01); },\n  p_vib_strength: function (v) { return v / 0.5; },\n\n  p_arp_mod:   function (v) {\n    return v < 1 ? Math.sqrt((1.0 - v) / 0.9) : -Math.sqrt((v - 1.0) / 10.0);\n  },\n  p_arp_speed: function (v) { return (v === 0) ? 1.0 :\n                              ( (1.0 - Math.sqrt((v - (v < 100 ? 30 : 32)) / 20000)))},\n\n  p_duty:      function (v) { return (v - 0.5) / -0.5; },\n  p_duty_ramp: function (v) { return v / -0.00005 },\n\n  p_repeat_speed: function (v) { return v === 0 ? 0 : -(Math.sqrt((v - 32) / 20000) - 1.0) },\n\n  p_pha_offset: function (v) { return (v < 0 ? -1 : 1) * Math.sqrt(Math.abs(v) / 1020) },\n  p_pha_ramp:   function (v) { return (v < 0 ? -1 : 1) * Math.sqrt(Math.abs(v)) },\n\n  p_lpf_freq:   function (v) { return Math.cbrt(v / 0.1); },\n  p_lpf_ramp:   function (v) { return (v - 1.0) / 0.0001; },\n  p_lpf_resonance: function (v) { return Math.sqrt((1.0 / (v / 5.0) - 1) / 20) },\n\n  p_hpf_freq: function (v) { return Math.sqrt(v / 0.1); },\n  p_hpf_ramp: function (v) { return (v - 1.0) / 0.0003; },\n  sound_vol: function (v) { return Math.log(v + 1);; }\n}\n\n// convert from internal representation to domain value without units\n\nvar domain = {\n  p_env_attack:  function (v) { return (v / 44100); },\n  p_env_sustain: function (v) { return (v / 44100); },\n  p_env_punch:   function (v) { return (v * 100); },\n  p_env_decay:   function (v) { return (v / 44100); },\n\n  p_base_freq:   function (v) { return v; },\n  p_freq_limit:  function (v) { return v; },\n  p_freq_ramp:   function (v) { return (44100*Math.log(v)/Math.log(0.5)); },\n  p_freq_dramp:  function (v) { return (v*44100 / Math.pow(2, -44101./44100)); },\n\n  p_vib_speed:    function (v) { return (441000/64. * v); },\n  p_vib_strength: function (v) { return (v*100); },\n\n  p_arp_mod:   function (v) { return (1./v); },\n  p_arp_speed: function (v) { return (v / 44100); },\n\n  p_duty:      function (v) { return (100 * v); },\n  p_duty_ramp: function (v) { return (8 * 44100 * v); },\n\n  p_repeat_speed: function (v) { return v === 0 ? 0 : (44100./v); },\n\n  p_pha_offset: function (v) { return (1000*v/44100); },\n  p_pha_ramp:   function (v) { return (1000*v); },\n\n  p_lpf_freq:   function (v) { return (v === .1) ? 0 : 8 * 44100 * v / (1-v); },\n  p_lpf_ramp:  function (v) { return Math.pow(v, 44100); },\n  p_lpf_resonance: function (v) { return (100*(1-v*.11));},\n\n  p_hpf_freq:   function (v) { return 8 * 44100 * v / (1-v); },\n  p_hpf_ramp: function (v) { return Math.pow(v, 44100); },\n\n  sound_vol: function (v) { return 10 * Math.log(v*v) / Math.log(10); }\n}\n\nvar domain_inverse = {\n  p_env_attack:  function (v) { return (v * 44100); },\n  p_env_sustain: function (v) { return (v * 44100); },\n  p_env_punch:   function (v) { return (v / 100); },\n  p_env_decay:   function (v) { return (v * 44100); },\n\n  p_base_freq:   function (v) { return v; },\n  p_freq_limit:  function (v) { return v; },\n  p_freq_ramp:   function (v) { return Math.exp(Math.log(0.5) * v / 44100); },\n  p_freq_dramp:  function (v) { return v * Math.pow(2, -44101./44100) / 44100; },\n\n  p_vib_speed:    function (v) { return (64. / 441000) * v; },\n  p_vib_strength: function (v) { return (v / 100); },\n\n  p_arp_mod:   function (v) { return (1. / v); },\n  p_arp_speed: function (v) { return (v * 44100); },\n\n  p_duty:      function (v) { return (v / 100); },\n  p_duty_ramp: function (v) { return (v / (8 * 44100)); },\n\n  p_repeat_speed: function (v) { return v <= 0 ? 0 : v > 1378 ? 32 : (44100 / v); },\n\n  p_pha_offset: function (v) { return (v / 1000) * 44100; },\n  p_pha_ramp:   function (v) { return (v / 1000); },\n\n  p_lpf_freq:   function (v) { return (v / (v + 8 * 44100)); },\n  p_lpf_ramp:  function (v) { return Math.pow(v, 1 / 44100); },\n  p_lpf_resonance: function (v) { return (1 - v / 100) / .11; },\n\n  p_hpf_freq:   function (v) { return (v / (v + 8 * 44100)); },\n  p_hpf_ramp: function (v) { return Math.pow(v, 1 / 44100); },\n\n  sound_vol: function (v) { return Math.sqrt(Math.pow(10, v / 10)); }\n}\n\n// convert from internal representation to printable units\n\nvar units = {\n  p_env_attack:  function (v) { return (v / 44100).toPrecision(4) + ' sec' },\n  p_env_sustain: function (v) { return (v / 44100).toPrecision(4) + ' sec' },\n  p_env_punch:   function (v) { return '+' + (v * 100).toPrecision(4) + '%'},\n  p_env_decay:   function (v) { return (v / 44100).toPrecision(4) + ' sec' },\n  \n  p_base_freq:   function (v) { return v.toPrecision(4) + 'Hz' },\n  p_freq_limit:  function (v) { return v.toPrecision(4) + 'Hz' },\n  p_freq_ramp:   function (v) { \n    return (44100*Math.log(v)/Math.log(0.5)).toPrecision(4) + ' 8va/sec'; },\n  p_freq_dramp:  function (v) { \n    return (v*44100 / Math.pow(2, -44101./44100)).toExponential(4) +\n      ' 8va/s^2'; },\n\n  p_vib_speed:    function (v) { return v === 0 ? 'OFF' : \n                                 (441000/64. * v).toPrecision(4) + ' Hz'},\n  p_vib_strength: function (v) { return v === 0 ? 'OFF' : \n                                 '&plusmn; ' + (v*100).toPrecision(4) + '%' },\n\n  p_arp_mod:   function (v) { return ((v === 1) ? 'OFF' : \n                                      'x ' + (1./v).toPrecision(4)) },\n  p_arp_speed: function (v) { return (v === 0 ? 'OFF' :\n                                      (v / 44100).toPrecision(4) +' sec') },\n\n  p_duty:      function (v) { return (100 * v).toPrecision(4) + '%'; },\n  p_duty_ramp: function (v) { return (8 * 44100 * v).toPrecision(4) +'%/sec'},\n\n  p_repeat_speed: function (v) { return v === 0 ? 'OFF' : \n                                 (44100/v).toPrecision(4) + ' Hz' },\n\n  p_pha_offset: function (v) { return v === 0 ? 'OFF' :\n                               (1000*v/44100).toPrecision(4) + ' msec' },\n  // Not so sure about this:\n  p_pha_ramp:   function (v) { return v === 0 ? 'OFF' :\n               (1000*v).toPrecision(4) + ' msec/sec' },\n\n  p_lpf_freq:   function (v) { \n    return (v === .1) ? 'OFF' : Math.round(8 * 44100 * v / (1-v)) + ' Hz'; },\n  p_lpf_ramp:  function (v) {  if (v === 1) return 'OFF';\n    return Math.pow(v, 44100).toPrecision(4) + ' ^sec'; },\n  p_lpf_resonance: function (v) { return (100*(1-v*.11)).toPrecision(4)+'%';},\n\n  p_hpf_freq:   function (v) { \n    return (v === 0) ? 'OFF' : Math.round(8 * 44100 * v / (1-v)) + ' Hz'; },\n  p_hpf_ramp: function (v) {  if (v === 1) return 'OFF';\n    return Math.pow(v, 44100).toPrecision(4) + ' ^sec'; },\n\n  sound_vol: function (v) { \n    v = 10 * Math.log(v*v) / Math.log(10);\n    var sign = v >= 0 ? '+' : '';\n    return sign + v.toPrecision(4) + ' dB'; \n  }\n};\n\n/*** Plumbing ***/\n\n(function (root, factory) {\n  if( true && module.exports) {\n    // I've not encountered a need for this yet, since I haven't\n    // run into a scenario where plain modules depend on CommonJS\n    // *and* I happen to be loading in a CJS browser environment\n    // but I'm including it for the sake of being thorough\n    RIFFWAVE = __webpack_require__(/*! ./riffwave.js */ \"./node_modules/jsfxr/riffwave.js\");\n    module.exports = (root.jsfxr = factory(RIFFWAVE));\n  } else if(true) {\n    // Now we're wrapping the factory and assigning the return\n    // value to the root (window) and returning it as well to\n    // the AMD loader.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'riffwave'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }())], __WEBPACK_AMD_DEFINE_RESULT__ = (function(RIFFWAVE){\n      return (root.jsfxr = factory(RIFFWAVE));\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n}(this, function(RIFFWAVE) {\n  // module code here....\n  return {\n    \"sfxr\": sfxr,\n    \"convert\": {\n      \"sliders\": sliders,\n      \"domain\": domain,\n      \"sliders_inverse\": sliders_inverse,\n      \"domain_inverse\": domain_inverse,\n      \"units\": units,\n    },\n    \"parameters\": {\n      \"order\": params_order,\n      \"signed\": params_signed,\n    },\n    \"Params\": Params,\n    \"SoundEffect\": SoundEffect,\n    \"waveforms\": {\n      \"SQUARE\": SQUARE,\n      \"SAWTOOTH\": SAWTOOTH,\n      \"SINE\": SINE,\n      \"NOISE\": NOISE\n    }\n  };\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/jsfxr/sfxr.js\n");

/***/ })

}]);